import React from 'react'
import type { NextPage } from 'next'
import Head from 'next/head'
import { useSelector } from 'react-redux'
import { RootState } from 'reducers'
import styles from '../styles/Home.module.css'
import { Button, Input, Modal, Select, Table } from 'components'
import { DefaultError, User } from 'models'
import { quitLoading, ROLES, setLoading, showError, showSuccess } from 'utils'
import { UserService } from 'services'

type UserForm = User & {
  password: string,
  password_confirmation: string
  edit?: boolean
}
const Home: NextPage = () => {
  const defaultPw = {
    password: '',
    password_confirmation: ''
  }
  const defaultUserForm = {
    name: '',
    email: '',
    role: ROLES.user,
    ... defaultPw
  }
  const user = useSelector((state: RootState) => state.user)
  const [users, setUsers] = React.useState<User[]>([])
  const [visible, setVisible] = React.useState<boolean>(false)
  const [form, setForm] = React.useState<UserForm>(defaultUserForm)
  const load = async () => {
    try {
      setLoading()
      const res = await UserService.getAll()
      setUsers(res)
    } catch (error) {
      showError()
    }finally{
      quitLoading()
    }
  }
  const close = () => {
    setVisible(false)
    setForm(defaultUserForm)
    load()
  }
  const handleForm = (key: keyof UserForm, value: string) =>{
    let _form: UserForm = {
      ... form,
      [key]: value
    }
    setForm(_form)
  }
  React.useEffect(() => {
    load()
  }, [])
  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    try {
      setLoading()
      let msg = ''
      switch (form.edit) {
        case true:
          const edit = await UserService.update(form)
          msg = edit.msg
          break;
      
        default:
          if(user?.isAdmin){
            const res = await UserService.create(form)
            msg = res.msg
          }
          break;
      }
      showSuccess(msg)
      close()
    } catch (error) {
      console.log('>>: error > ', error)
      showError(error?.message)
    }finally{
      quitLoading()
    }
  }
  const editUser = (element: User) => {
    const _form: UserForm = {
      ... defaultPw,
      ... element,
      edit: true
    }
    setForm(_form)
    setVisible(true)
  }
  const getRoleNameById = (role: number) => {
    switch (role) {
      case ROLES.admin:
        return 'Administrador'
        break;
    
      default:
        return 'Usuario'
        break;
    }
  }
  const deleteUser = async (element: User) => {
    try {
      setLoading()
      const res = await UserService.delete(element)
      showSuccess(res.msg)
      load()
    } catch (error) {
      showError()
    }finally{
      quitLoading()
    }
  }
  return (
    <div className={styles.container}>
      <Head>
        <title>Usuarios</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Modal
        visible={visible}
        onClose={close}
        title="Crear/Editar usuario"
      >
        <form
          onSubmit={handleSubmit}
        >
          <div className="container">
            <div className="row">
              <div className="col-md-6 col-sm-12">
                <Input
                  name="name"
                  value={form.name}
                  onChange={(value: string) => handleForm('name', value)}
                  label="Nombre"
                />
              </div>
              <div className="col-md-6 col-sm-12">
                <Input
                  name="email"
                  value={form.email}
                  type="email"
                  onChange={(value: string) => handleForm('email', value)}
                  label="Email"
                />
              </div>
              <div className="col-12">
                <Select
                  name="role"
                 
                  onChange={(value: string) => handleForm('role', value)}
                  value={form.role}
                  label="Rol de usuario"
                  options={[
                    {
                      label: 'Administrador',
                      value: ROLES.admin
                    },
                    {
                      label: 'Usuario',
                      value: ROLES.user
                    },
                  ]}
                />
              </div>
              <div className="col-md-6 col-sm-12">
                <Input
                  name="password"
                  value={form.password}
                  type="password"
                  onChange={(value: string) => handleForm('password', value)}
                  label="Contraseña"
                />
              </div>
              <div className="col-md-6 col-sm-12">
                <Input
                  name="password_confirmation"
                  type="password"
                  value={form.password_confirmation}
                  onChange={(value: string) => handleForm('password_confirmation', value)}
                  label="Repetir contraseña"
                />
              </div>
              <div className="col-12 text-center w-100 p-2">
                <Button
                  type="submit"
                  label="Guardar"
                />
              </div>
            </div>
          </div>
        </form>
      </Modal>
      <div className="w-100 text-center">
        <Table
            header={
                ['#', 'Nombre', 'Email', 'Rol', 'Acciones']
            }
            data={users.length}
            title="Usuarios"
            right={
                <Button
                    icon="plus"
                    className="primary"
                    small
                    onClick={() => setVisible(true)}
                />
            }
        >
            {
                users?.map((element, i) => {
                    return(
                        <tr key={ i }>
                            <th scope="row">{ element.id }</th>
                            <td> {element.name} </td>
                            <td> {element.email} </td>
                            <td> {getRoleNameById(element.role)} </td>
                            <td>
                                <Button
                                    icon="edit"
                                    className="info text-white"
                                    onClick={() => editUser(element)}
                                    small
                                />
                                <Button
                                    icon="trash"
                                    className="danger text-white"
                                    onClick={() => deleteUser(element)}
                                    small
                                />
                            </td>
                        </tr>
                    )
                })
            }
        </Table>
      </div>
    </div>
  )
}

export default Home
