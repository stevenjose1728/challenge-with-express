import React from 'react'
import type { NextPage } from 'next'
import Head from 'next/head'
import { useSelector } from 'react-redux'
import { RootState } from 'reducers'
import styles from '../styles/Home.module.css'
import { Button, Input, Modal, Select, Table } from 'components'
import { DefaultError, User } from 'models'
import { quitLoading, setLoading, showError, showSuccess } from 'utils'
import { UserService } from 'services'

type UserForm = User & {
  password: string,
  password_confirmation: string
}
const Home: NextPage = () => {
  const user = useSelector((state: RootState) => state.user)
  const [users, setUsers] = React.useState<User[]>([])
  const [visible, setVisible] = React.useState<boolean>(false)
  const [form, setForm] = React.useState<UserForm>({
    name: '',
    email: '',
    role: 3,
    password: '',
    password_confirmation: ''
  })
  const load = async () => {
    try {
      setLoading()
      const res = await UserService.getAll()
      console.log('>>: res > ', res)
    } catch (error) {
      showError()
    }finally{
      quitLoading()
    }
  }
  const close = () => {
    setVisible(false)
    load()
  }
  const handleForm = (key: keyof UserForm, value: string) =>{
    let _form: UserForm = {
      ... form,
      [key]: value
    }
    setForm(_form)
  }
  React.useEffect(() => {
    load()
  }, [])
  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    try {
      setLoading()
      const res = await UserService.create(form)
      showSuccess(res.msg)
      close()
    } catch (error) {
      console.log('>>: error > ', error)
      showError(error?.message)
    }finally{
      quitLoading()
    }
  }
  return (
    <div className={styles.container}>
      <Head>
        <title>Usuarios</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Modal
        visible={visible}
        onClose={close}
        title="Crear/Editar usuario"
      >
        <form
          onSubmit={handleSubmit}
        >
          <div className="container">
            <div className="row">
              <div className="col-md-6 col-sm-12">
                <Input
                  name="name"
                  value={form.name}
                  onChange={(value: string) => handleForm('name', value)}
                  label="Nombre"
                />
              </div>
              <div className="col-md-6 col-sm-12">
                <Input
                  name="email"
                  value={form.email}
                  type="email"
                  onChange={(value: string) => handleForm('email', value)}
                  label="Email"
                />
              </div>
              <div className="col-12">
                <Select
                  name="role"
                 
                  onChange={(value: string) => handleForm('role', value)}
                  value={form.role}
                  label="Rol de usuario"
                  options={[
                    {
                      label: 'Administrador',
                      value: 2
                    },
                    {
                      label: 'Usuario',
                      value: 3
                    },
                  ]}
                />
              </div>
              <div className="col-md-6 col-sm-12">
                <Input
                  name="password"
                  value={form.password}
                  type="password"
                  onChange={(value: string) => handleForm('password', value)}
                  label="Contraseña"
                />
              </div>
              <div className="col-md-6 col-sm-12">
                <Input
                  name="password_confirmation"
                  type="password"
                  value={form.password_confirmation}
                  onChange={(value: string) => handleForm('password_confirmation', value)}
                  label="Repetir contraseña"
                />
              </div>
              <div className="col-12 text-center w-100 p-2">
                <Button
                  type="submit"
                  label="Guardar"
                />
              </div>
            </div>
          </div>
        </form>
      </Modal>
      <Table
          header={
              ['#', 'Nombre', 'Telefono', 'Email', 'Acciones']
          }
          data={users.length}
          title="Usuarios"
          right={
              <Button
                  icon="plus"
                  className="primary"
                  small
                  onClick={() => setVisible(true)}
              />
          }
      >
          {
              users?.map((element, i) => {
                  return(
                      <tr key={ i }>
                          <th scope="row">{ element.id }</th>
                          <td> {element.name} </td>
                          <td> {element.email} </td>
                          <td>
                              {/* <Button
                                  icon="eye"
                                  onClick={() => viewUser(element)}
                                  small
                              />
                              <Button
                                  icon="edit"
                                  className="info text-white"
                                  onClick={() => editUser(element)}
                                  small
                              />
                              <Button
                                  icon="trash"
                                  className="danger text-white"
                                  onClick={() => deleteUser(element)}
                                  small
                              /> */}
                          </td>
                      </tr>
                  )
              })
          }
      </Table>
    </div>
  )
}

export default Home
